name: E2E Tests

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      ref:
        required: true
        type: string

concurrency: e2e-cluster
env:
  COMMIT_ID: ${{ inputs.ref }}
  IMAGE_NAME: "s3-csi-driver"
  BENCHMARK_ARTIFACTS_FOLDER: ".github/artifacts"
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  KOPS_STATE_FILE: "s3://${{ vars.KOPS_STATE_FILE }}"
  BENCHMARK_BUCKET: "s3://${{ vars.BENCHMARK_BUCKET }}"
  TAG_UNTESTED: "untested_${{ env.COMMIT_ID }}"
  TAG_PASSED: "test_passed_${{ env.COMMIT_ID }}"
jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: false
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ vars.IAM_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push docker image to Amazon ECR Private Repository
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          PLATFORM: "linux/amd64,linux/arm64"
          TAG: ${{ env.TAG_UNTESTED }}
        run: |
          make -j `nproc` all-push-skip-if-present
  test:
    needs: build
    strategy:
      # Failing fast causes some resources created during the test to leak,
      # so we disable it to ensure all resources created during test are properly cleaned up.
      fail-fast: false
      matrix:
        cluster-type: ["eksctl", "kops"]
        arch: ["x86", "arm"]
        family: ["AmazonLinux2", "Bottlerocket"]
        kubernetes-version: ["1.28.13", "1.29.8", "1.30.4", "1.31.0"]
        exclude:
          - cluster-type: "kops"
            family: "Bottlerocket"
          - cluster-type: "eksctl"
            arch: "arm"
            family: "Bottlerocket"
          # Our tests are failing on clusters created with kops 1.29+.
          # Until we fix that issue, we use kops 1.28 which only supports k8s versions up to 1.28.
          # So, we only run our tests in k8s versions 1.29 and 1.30 on eksctl.
          - cluster-type: "kops"
            kubernetes-version: "1.29.8"
          - cluster-type: "kops"
            kubernetes-version: "1.30.4"
          - cluster-type: "kops"
            kubernetes-version: "1.31.0"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: "${{ vars.AWS_REGION }}"
      CLUSTER_TYPE: "${{ matrix.cluster-type }}"
      ARCH: "${{ matrix.arch }}"
      AMI_FAMILY: "${{ matrix.family }}"
      K8S_VERSION: "${{ matrix.kubernetes-version }}"
      TAG: "${{ env.TAG_UNTESTED }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: false
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Configure AWS Credentials
        id: login
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.IAM_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Install tools
        run: |
          export ACTION=install_tools
          tests/e2e-kubernetes/scripts/run.sh
      - name: Create cluster
        env:
          ACTION: "create_cluster"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Update kubeconfig
        env:
          ACTION: "update_kubeconfig"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Install the driver
        env:
          ACTION: "install_driver"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Run E2E Tests
        env:
          ACTION: "run_tests"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Run Performance Tests
        if: (env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'bench') && matrix.cluster-type == 'kops' && matrix.arch == 'x86'
        env:
          ACTION: "run_perf"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Download previous benchmark results
        if: (env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'bench') && matrix.cluster-type == 'kops' && matrix.arch == 'x86'
        run: |
          mkdir -p ${{ env.BENCHMARK_ARTIFACTS_FOLDER }}
          aws s3 cp --region ${{ vars.BENCHMARK_RESULTS_REGION }} ${{ vars.BENCHMARK_BUCKET }}/benchmark-data.json ${{ env.BENCHMARK_ARTIFACTS_FOLDER }}/benchmark-data.json || true
      - name: Update benchmark result file
        if: (env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'bench') && matrix.cluster-type == 'kops' && matrix.arch == 'x86'
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: "customBiggerIsBetter"
          output-file-path: tests/e2e-kubernetes/csi-test-artifacts/output.json
          alert-threshold: "200%"
          fail-on-alert: true
          external-data-json-path: ${{ env.BENCHMARK_ARTIFACTS_FOLDER }}/benchmark-data.json
          max-items-in-chart: 20
      - name: Store benchmark result
        if: (env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'bench') && matrix.cluster-type == 'kops' && matrix.arch == 'x86'
        run: |
          tests/e2e-kubernetes/scripts/format_benchmark_data.py ${{ env.BENCHMARK_ARTIFACTS_FOLDER }}/benchmark-data.json ${{ env.BENCHMARK_ARTIFACTS_FOLDER }}/quicksight-data.json
          aws s3 cp ${{ env.BENCHMARK_ARTIFACTS_FOLDER }} ${{ env.BENCHMARK_BUCKET }} --recursive
      - name: Post e2e cleanup
        if: always()
        env:
          ACTION: "e2e_cleanup"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Uninstall the driver
        if: always()
        env:
          ACTION: "uninstall_driver"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Delete cluster
        if: always()
        env:
          ACTION: "delete_cluster"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Mark tests as passed
        if: ${{ success() }}
        env:
          REGISTRY: "${{ steps.login.outputs.aws-account-id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          REPOSITORY: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        run: |
          docker manifest create ${REPOSITORY}:${TAG_TESTED} ${REPOSITORY}:${TAG_UNTESTED}
          docker manifest push ${REPOSITORY}:${TAG_TESTED}
